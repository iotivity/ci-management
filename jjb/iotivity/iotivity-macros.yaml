# IoTivity Macros

## Wrappers
- wrapper:
    name: build-timeout
    wrappers:
        - timeout:
            type: no-activity
            timeout: 10
            abort: true

- wrapper:
    name: build-timeout-fail
    wrappers:
        - timeout:
            type: no-activity
            timeout: 10
            fail: true

## Builders
- builder:
    name: linux
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            ./auto_build.sh {component}

- builder:
    name: windows
    builders:
        - batch: |
            @echo off
            set MSVC_VERSION={msvc-version}
            IF "%MSVC_VERSION%" == "12.0" (
              IF NOT "%GIT_BRANCH%" == "1.2-rel" (
                set TARGET_ARCH=x86
              )
            )
            set
            run.bat build
            run.bat test
            run.bat clean

- builder:
    name: windows-kill-unit-tests
    builders:
        - batch: |
            IF "{msvc-version}" == "12.0" (
              taskkill /F /IM "unittests.exe"
            )

- builder:
    name: osx
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            PATH=$PATH:/usr/local/bin/
            if (git rev-list HEAD | grep -q d0b861c0276208b3fd1b29bf98908e401c7ca17f); then
              ./auto_build.sh darwin
            fi
            # Run Tests against OSX 10.10 without Logging
            echo "*********** Build for OSX 10.10 *************"
            scons TARGET_OS=darwin SYS_VERSION=10.10 RELEASE=false
            scons TARGET_OS=darwin SYS_VERSION=10.10 RELEASE=false -c
            scons TARGET_OS=darwin SYS_VERSION=10.10 RELEASE=false LOGGING=false
            export DYLD_LIBRARY_PATH=./extlibs/gtest/gtest-1.7.0/lib/.libs
            ./out/darwin/x86_64/debug/resource/csdk/stack/test/stacktests

- builder:
    name: tizen
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            ./auto_build.sh tizen

- builder:
    name: android-arch
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            if (git rev-list HEAD | grep -q 0a3b83222bfff7e44ecb60c89ce682a58a0ee762); then
              echo "Using seperate android builds."
            else
              ./auto_build.sh android_{arch}
            fi

- builder:
    name: android
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            ./auto_build.sh android

- builder:
    name: android-transport
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            if (git rev-list HEAD | grep -q 0a3b83222bfff7e44ecb60c89ce682a58a0ee762); then
              ./auto_build.sh android_{arch}_with_{transport}
            else
              echo "Using unified Android builds. Please rebase"
            fi

- builder:
    name: unit-tests
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=true
            export CCACHE_DISABLE=true

            ./auto_build.sh unit_tests

- builder:
    name: sonar-runner
    builders:
        - sonar:
            sonar-name: Sonar
            properties: |
                sonar.projectKey=iotivity:master
                sonar.projectName=Iotivity
                sonar.projectVersion=1.1.0

                sonar.sources=resource,service,examples,android,build_common,tools
                sonar.language=c++

                sonar.cxx.compiler.parser=GCC
                sonar.cxx.errorRecoveryEnabled=True

                sonar.cxx.includeDirectories=resource,service,examples,android,build_common,tools

                sonar.cxx.valgrind.reportPath=*.memcheck
                sonar.cxx.vera.reportPath=vera-report.xml
                sonar.cxx.cppcheck.reportPath=cppcheck-report.xml
                sonar.cxx.rats.reportPath=rats-report.xml

- builder:
    name: linux-tcp
    builders:
        - shell: |
            #!/bin/bash -eux
            set -o pipefail

            export VERBOSE=false
            export CCACHE_DISABLE=false

            ./auto_build.sh linux_unsecured_with_tcp

## Publishers
- publisher:
    name: archive-artifacts
    publishers:
        - archive:
            artifacts: '{artifacts}'
            latest-only: false
            allow-empty: true
            only-if-successful: false
            fingerprint: true
            default-excludes: true

- publisher:
    name: email-notification
    publishers:
        - email:
            recipients: '{mailto}'
            notify-every-unstable-build: false
            send-to-individuals: true

- publisher:
    name: email-notification-unstable
    publishers:
        - email:
            recipients: '{mailto}'
            notify-every-unstable-build: true
            send-to-individuals: true

- publisher:
    name: valgrind-report
    publishers:
        - valgrind:
            pattern: '*.memcheck'
            thresholds:
                failed:
                    invalid-read-write: 0
                    definitely-lost: 20
                    total: 50
            fail-no-reports: false
            fail-invalid-reports: false
            publish-if-aborted: true
            publish-if-failed: true

- publisher:
    name: xunit-report
    publishers:
        - xunit:
            thresholdmode: '1'
            test-time-margin: 3000
            types:
                - gtest:
                    pattern: 'out/**/test_out/*.xml'
                    skip-if-no-test-files: true
                    fail-if-not-new: false
                    deleteoutput: true
                    stoponerror: false
